#!/usr/bin/env php
<?php
	require_once("changebackground_config.php");
	require_once("changebackground_backends.php");

	if (!is_dir(TEMPDIR) && (!mkdir(TEMPDIR) || glob(TEMPDIR . "*.{jpg,png,gif,jpeg}", GLOB_BRACE) === false)) {
		exit("Could not open tmpdir");
	}

	$files = glob(IMAGEDIR . "*.{jpg,png,gif,jpeg}", GLOB_BRACE);
	if ($files === false) {
		exit("Could not open directory");
	}
	if (empty($files)) {
		exit("No image files in directory");
	}
	$skip = array();
	$previous = array();
	// Open file
	if (($fp = fopen(TEMPDIR . "random_cache", "c+")) !== false) {
		// Decode contents
		$skip = json_decode(fread($fp, (filesize(TEMPDIR . "random_cache")?:0)), true);
		// If file was not empty
		if ($skip !== null) {
			// Check if data is still good and if we don't have too many files in the skip cache
			if (isset($skip['previous']) && 
				count($files) == $skip['total'] && 
				sha1(implode("|", $files)) == $skip['hash'] &&
				count($skip['previous']) < (count($files) - (WORKSPACES * DESKTOPS))) {
				$previous = $skip['previous'];
			// Reset data otherwise
			} else {
				$previous = array();
			}
		}
	} else {
		exit("Could not open random cache file");
	}

	$random = array();
	while (count($random) < (WORKSPACES * DESKTOPS)) {
		$r = rand(0, count($files) - 1);
		if (in_array($files[$r], $previous)) {
			continue;
		}
		$random[] = $files[$r];
		$previous[] = $files[$r];
		$random = array_unique($random);
	}
	$random = array_values($random);
	$skip = array();
	$skip['previous'] = array_values($previous);
	$skip['total'] = count($files);
	$skip['hash'] = sha1(implode("|", $files));

	ftruncate($fp, 0);
	rewind($fp);
	fwrite($fp, json_encode($skip));
	fclose($fp);

	shuffle($random);

	$out = array();

	printf("Found %d images in directory\n", count($files));
	printf("Generated %d random files: %s\n", count($random), implode(", ", $random));
	printf("There are %d files in the skip cache\n", count($skip['previous']));

	for ($i = 0; $i < WORKSPACES; $i++) {
		$images = array();
		for ($j = 0; $j < DESKTOPS; $j++) {
			$images[] = $random[$j + ($i * DESKTOPS)];
		}

		$filename = TEMPDIR . "background_$i." . FINALEXT;
		$out[] = $filename;

		printf("Generating %s\n", $filename);

		switch (MONTAGEMODE) {
			case "crop":
				$new_images = array();
				for ($z = 0; $z < count($images); $z++) {
					$tmpfilename = sprintf("%s%s-%s-%s.%s", TEMPDIR, "TEMP-", basename($images[$z]), GEOMETRY, TEMPEXT);
					if (!file_exists($tmpfilename)) {
						call_user_func(TEMPMETHOD . "::convert", GEOMETRY, $images[$z], $tmpfilename);
					}
					$new_images[] = $tmpfilename;
				}
				$images = $new_images;
			case "scale":
			default:
				call_user_func(FINALMETHOD . "::montage", GEOMETRY, TILES, $images, $filename);
				break;
		}

		printf("Generated %s\n", $filename);
	}

	printf("Detecting Ubuntu version\n");
	$version = system("lsb_release -a 2>/dev/null | grep Description | cut -f2", $retval);

	if ($version == "Ubuntu 12.10" && $retval == 0) {
		printf("Executing DConf Compiz hack\n");
		system("dconf write /org/compiz/profiles/unity/plugins/wallpaper/bg-image \"['" . implode("','", $out) . "']\"");
		system("dconf write /org/compiz/profiles/unity/plugins/wallpaper/bg-image-pos \"[" . implode(",", array_fill(0, WORKSPACES, 1)) . "]\"");
		sleep(2);
		system("dconf write /org/compiz/profiles/unity/plugins/wallpaper/bg-image-pos \"[" . implode(",", array_fill(0, WORKSPACES, 2)) . "]\"");
		sleep(2);
	} else {
		printf("Executing GConf Compiz hack\n");
		system("gconftool --set /apps/compiz-1/plugins/wallpaper/screen0/options/bg_image \"[" . implode("\",\"", $out) . "]\" --type list --list-type string 2>&1");
		system("gconftool --set /apps/compiz-1/plugins/wallpaper/screen0/options/bg_image_pos \"[" . implode("\",\"", array_fill(0, WORKSPACES, 1)) . "]\" --type list --list-type int 1>&1");
		sleep(2);
		system("gconftool --set /apps/compiz-1/plugins/wallpaper/screen0/options/bg_image_pos \"[" . implode("\",\"", array_fill(0, WORKSPACES, 2)) . "]\" --type list --list-type int 2>&1");
		sleep(2);
	}
	printf("Done @ %s\n", date("H:i:s"));
?>
