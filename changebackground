#!/usr/bin/env php
<?php
	require_once("changebackground_config.php");
	require_once("changebackground_backends.php");

	if (!is_dir(TEMPDIR) && (!mkdir(TEMPDIR) || glob(TEMPDIR . "*.{jpg,png,gif,jpeg}", GLOB_BRACE) === false)) {
		exit("Could not open tmpdir");
	}

	$files = glob(IMAGEDIR . "*.{jpg,png,gif,jpeg}", GLOB_BRACE);
	if ($files === false) {
		exit("Could not open directory");
	}
	if (empty($files)) {
		exit("No image files in directory");
	}
	$skip = array();
	if (($fp = fopen(TEMPDIR . "random_cache", "c+")) !== false) {
		$skip = json_decode(fread($fp, (filesize(TEMPDIR . "random_cache")?:0)));
		if ($skip === null || count($skip) >= (count($files) - (WORKSPACES * DESKTOPS))) {
			$skip = array();
		}
	} else {
		exit("Could not open random cache file");
	}

	$random = array();
	while (count($random) < (WORKSPACES * DESKTOPS)) {
		$r = rand(0, count($files) - 1);
		if (in_array($r, $skip)) {
			continue;
		}
		$random[] = $r;
		$skip[] = $r;
		$random = array_unique($random, SORT_NUMERIC);
	}
	$random = array_values($random);
	$skip = array_values($skip);

	ftruncate($fp, 0);
	rewind($fp);
	fwrite($fp, json_encode($skip));
	fclose($fp);

	$out = array();

	printf("Found %d images in directory\n", count($files));
	printf("Generated %d random numbers: %s\n", count($random), implode(", ", $random));
	printf("There were %d numbers in the skip cache\n", count($skip));

	for ($i = 0; $i < WORKSPACES; $i++) {
		$images = array();
		for ($j = 0; $j < DESKTOPS; $j++) {
			$images[] = $files[$random[$j + ($i * DESKTOPS)]];
		}

		$filename = TEMPDIR . "background_$i." . FINALEXT;
		$out[] = $filename;

		printf("Generating %s\n", $filename);

		switch (MONTAGEMODE) {
			case "crop":
				$new_images = array();
				for ($z = 0; $z < count($images); $z++) {
					$tmpfilename = sprintf("%s%s-%s-%s.%s", TEMPDIR, "TEMP-", basename($images[$z]), GEOMETRY, TEMPEXT);
					if (!file_exists($tmpfilename)) {
						call_user_func(TEMPMETHOD . "::convert", GEOMETRY, $images[$z], $tmpfilename);
					}
					$new_images[] = $tmpfilename;
				}
				$images = $new_images;
			case "scale":
			default:
				call_user_func(FINALMETHOD . "::montage", GEOMETRY, TILES, $images, $filename);
				break;
		}

		printf("Generated %s\n", $filename);
	}

	printf("Executing GConf Compiz hack\n");
	system("gconftool --set /apps/compiz-1/plugins/wallpaper/screen0/options/bg_image \"[" . implode("\",\"", $out) . "]\" --type list --list-type string 2>&1");
	system("gconftool --set /apps/compiz-1/plugins/wallpaper/screen0/options/bg_image_pos \"[" . implode("\",\"", array_fill(0, WORKSPACES, 1)) . "]\" --type list --list-type int 1>&1");
	sleep(2);
	system("gconftool --set /apps/compiz-1/plugins/wallpaper/screen0/options/bg_image_pos \"[" . implode("\",\"", array_fill(0, WORKSPACES, 2)) . "]\" --type list --list-type int 2>&1");
	sleep(2);
	printf("Done @ %s\n", date("H:i:s"));
?>
